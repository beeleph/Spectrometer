
/*! \fn      void CheckKeyboardCommands(WaveDumpRun_t *WDrun)
*   \brief   check if there is a key pressed and execute the relevant command
*
*   \param   WDrun:   Pointer to the WaveDumpRun_t data structure
*   \param   WDcfg:   Pointer to the WaveDumpConfig_t data structure
*   \param   BoardInfo: structure with the board info
*/
void N6740::CheckKeyboardCommands(int handle, WaveDumpRun_t *WDrun, WaveDumpConfig_t *WDcfg, CAEN_DGTZ_BoardInfo_t BoardInfo)
{
    int c = 0;
        uint8_t percent;
    if(!kbhit())
        return;

    c = getch();
    if ((c < '9') && (c >= '0')) {
        int ch = c-'0';
        if (BoardInfo.FamilyCode == CAEN_DGTZ_XX740_FAMILY_CODE){
            WDrun->ChannelPlotMask ^= (1 << ch);
            if ((BoardInfo.FamilyCode == CAEN_DGTZ_XX740_FAMILY_CODE) && (ch == 8))
                qDebug() << "Channel " << ch + WDrun->GroupPlotIndex * 8 << " belongs to a different group\n";
                        else
                        if (WDrun->ChannelPlotMask & (1 << ch))
                qDebug() << "Channel " << ch + WDrun->GroupPlotIndex*8 << " enabled for plotting\n";
            else
                qDebug() << "Channel " << ch + WDrun->GroupPlotIndex*8 << " disabled for plotting\n";
        }
                else if((BoardInfo.FamilyCode == CAEN_DGTZ_XX730_FAMILY_CODE) || (BoardInfo.FamilyCode == CAEN_DGTZ_XX725_FAMILY_CODE) && (WDcfg->Nch>8)) {
                ch = ch + 8 * WDrun->GroupPlotSwitch;
                if(ch!= 8 && WDcfg->EnableMask & (1 << ch)){
                WDrun->ChannelPlotMask ^= (1 << ch);
                if (WDrun->ChannelPlotMask & (1 << ch))
            qDebug() << "Channel " << ch << " enabled for plotting\n";
                else
            qDebug() << "Channel " << ch << " disabled for plotting\n";
                }
        else
            qDebug() << "Channel "<< ch << " not enabled for acquisition\n";
                }
                else {
            WDrun->ChannelPlotMask ^= (1 << ch);
            if (WDrun->ChannelPlotMask & (1 << ch))
                qDebug() << "Channel %d enabled for plotting\n" << ch;
            else
                qDebug() << "Channel %d disabled for plotting\n" << ch;
        }
    } else {
        switch(c) {
        case 'g' :
                        //for boards with >8 channels
                        if ((BoardInfo.FamilyCode == CAEN_DGTZ_XX730_FAMILY_CODE) || (BoardInfo.FamilyCode == CAEN_DGTZ_XX725_FAMILY_CODE) && (WDcfg->Nch > 8))
                        {
                                if (WDrun->GroupPlotSwitch == 0) {
                                        WDrun->GroupPlotSwitch = 1;
                    qDebug() << "Channel group set to %d: use numbers 0-7 for channels 8-15\n" << WDrun->GroupPlotSwitch;
                                }
                                else if(WDrun->GroupPlotSwitch == 1)	{
                                        WDrun->GroupPlotSwitch = 0;
                    qDebug() << "Channel group set to %d: use numbers 0-7 for channels 0-7\n" << WDrun->GroupPlotSwitch;
                                }
                        }
                        else
            // Update the group plot index
            if ((WDcfg->EnableMask) && (WDcfg->Nch>8))
                //GoToNextEnabledGroup(WDrun, WDcfg);
            break;
        case 'q' :
            WDrun->Quit = 1;
            break;
        case 'R' :
            WDrun->Restart = 1;
            break;
        case 't' :
            if (!WDrun->ContinuousTrigger) {
                CAEN_DGTZ_SendSWtrigger(handle);
                qDebug() << "Single Software Trigger issued\n";
            }
            break;
        case 'T' :
            WDrun->ContinuousTrigger ^= 1;
            if (WDrun->ContinuousTrigger)
                qDebug() << "Continuous trigger is enabled\n";
            else
                qDebug() << "Continuous trigger is disabled\n";
            break;
        case 'P' :
            if (WDrun->ChannelPlotMask == 0)
                qDebug() << "No channel enabled for plotting\n";
            else
                WDrun->ContinuousPlot ^= 1;
            break;
        case 'p' :
            if (WDrun->ChannelPlotMask == 0)
                qDebug() << "No channel enabled for plotting\n";
            else
                WDrun->SinglePlot = 1;
            break;
        case 'f' :
            WDrun->PlotType = (WDrun->PlotType == PLOT_FFT) ? PLOT_WAVEFORMS : PLOT_FFT;
            WDrun->SetPlotOptions = 1;
            break;
        case 'h' :
            WDrun->PlotType = (WDrun->PlotType == PLOT_HISTOGRAM) ? PLOT_WAVEFORMS : PLOT_HISTOGRAM;
            WDrun->RunHisto = (WDrun->PlotType == PLOT_HISTOGRAM);
            WDrun->SetPlotOptions = 1;
            break;
        case 'w' :
            if (!WDrun->ContinuousWrite)
                WDrun->SingleWrite = 1;
            break;
        case 'W' :
            WDrun->ContinuousWrite ^= 1;
            if (WDrun->ContinuousWrite)
                qDebug() << "Continuous writing is enabled\n";
            else
                qDebug() << "Continuous writing is disabled\n";
            break;
        case 's' :
            if (WDrun->AcqRun == 0) {

                Set_relative_Threshold(handle, WDcfg, BoardInfo);

                                if (BoardInfo.FamilyCode == CAEN_DGTZ_XX730_FAMILY_CODE || BoardInfo.FamilyCode == CAEN_DGTZ_XX725_FAMILY_CODE)
                                        WDrun->GroupPlotSwitch = 0;

                qDebug() << "Acquisition started\n";

                CAEN_DGTZ_SWStartAcquisition(handle);

                WDrun->AcqRun = 1;

            } else {
                qDebug() << "Acquisition stopped\n";
                CAEN_DGTZ_SWStopAcquisition(handle);
                WDrun->AcqRun = 0;
                                //WDrun->Restart = 1;
            }
            break;
        case 'm' :
            qDebug() << "Board Family doesn't support ADC Temperature Monitor.\n";
            break;
        case 'c' :
            //calibrate(handle, WDrun, BoardInfo);
            break;
                case 'D':
                        if (WDrun->AcqRun == 0) {
                qDebug() << "Disconnect input signal from all channels and press any key to start.\n";
                                getch();
                                if (BoardInfo.FamilyCode == CAEN_DGTZ_XX740_FAMILY_CODE)//XX740 specific
                                        Calibrate_XX740_DC_Offset(handle, WDcfg, BoardInfo);
                else
                                        Calibrate_DC_Offset(handle, WDcfg, BoardInfo);

                                int i = 0;
                                CAEN_DGTZ_ErrorCode err;
                                //set new dco values using calibration data
                                for (i = 0; i < BoardInfo.Channels; i++) {
                                        if (WDcfg->EnableMask & (1 << i)) {
                                                if(WDcfg->Version_used[i] == 1)
                                                        Set_calibrated_DCO(handle, i, WDcfg, BoardInfo);
                                                else {
                                                        err = CAEN_DGTZ_SetChannelDCOffset(handle, (uint32_t)i, WDcfg->DCoffset[i]);
                                                        if (err)
                                qDebug() << "Error setting channel %d offset\n" << i;
                                                }
                                        }
                                }
#ifdef _WIN32
                                Sleep(200);
#else
                                usleep(200000);
#endif
                qDebug() << "DAC calibration ready!!\n";
                        }
                        else {
                qDebug() << "Acquisition is running. Stop acquisition to start DAC calibration.\n";
                        }
                        break;
        case ' ' :
            qDebug() << "\n                            Bindkey help                                \n";
            qDebug() << "--------------------------------------------------------------------------\n";
            qDebug() << "  [q]   Quit\n";
            qDebug() << "  [R]   Reload configuration file and restart\n";
            qDebug() << "  [s]   Start/Stop acquisition\n";
            qDebug() << "  [t]   Send a software trigger (single shot)\n";
            qDebug() << "  [T]   Enable/Disable continuous software trigger\n";
            qDebug() << "  [w]   Write one event to output file\n";
            qDebug() << "  [W]   Enable/Disable continuous writing to output file\n";
            qDebug() << "  [p]   Plot one event\n";
            qDebug() << "  [P]   Enable/Disable continuous plot\n";
            qDebug() << "  [f]   Toggle between FFT and Waveform plot\n";
            qDebug() << "  [h]   Toggle between Histogram and Waveform plot\n";
            qDebug() << "  [g]   Change the index of the group to plot (XX740 family)\n";
            qDebug() << "  [m]   Single ADC temperature monitor (XX751/30/25 only)\n";
            qDebug() << "  [c]   ADC Calibration (XX751/30/25 only)\n";
            qDebug() << "  [D]   DAC offset calibration\n";
            qDebug() << " [0-7]  Enable/Disable one channel on the plot\n";
            qDebug() << "        For x740 family this is the plotted group's relative channel index\n";
            qDebug() << "[SPACE] This help\n";
            qDebug() << "--------------------------------------------------------------------------\n";
            qDebug() << "Press a key to continue\n";
            //getch();
            break;
        default :   break;
        }
    }
}


// oldmain

int ret = 0;
int  handle = -1;
ERROR_CODES ErrCode= ERR_NONE;
int i, ch, Nb=0, Ne=0;
uint32_t AllocatedSize, BufferSize, NumEvents;
char *buffer = NULL;
char *EventPtr = NULL;
char ConfigFileName[100];
int isVMEDevice= 0, MajorNumber;
uint64_t CurrentTime, PrevRateTime, ElapsedTime;
int nCycles= 0;
CAEN_DGTZ_BoardInfo_t       BoardInfo;
CAEN_DGTZ_EventInfo_t       EventInfo;

CAEN_DGTZ_UINT16_EVENT_t    *Event16=NULL; /* generic event struct with 16 bit data (10, 12, 14 and 16 bit digitizers */

CAEN_DGTZ_UINT8_EVENT_t     *Event8=NULL; /* generic event struct with 8 bit data (only for 8 bit digitizers) */
FILE *f_ini;

int ReloadCfgStatus = 0x7FFFFFFF; // Init to the bigger positive number



if (WDrun.Restart && WDrun.AcqRun)
{
#ifdef _WIN32
        Sleep(300);
#else
        usleep(300000);
#endif
Set_relative_Threshold(handle, &WDcfg, BoardInfo);

        CAEN_DGTZ_SWStartAcquisition(handle);
}
else
qDebug() << "[s] start/stop the acquisition, [q] quit, [SPACE] help\n";
WDrun.Restart = 0;



PrevRateTime = get_time();
/* *************************************************************************************** */
/* Readout Loop                                                                            */
/* *************************************************************************************** */

while(!WDrun.Quit) {
    // Check for keyboard commands (key pressed)
    CheckKeyboardCommands(handle, &WDrun, &WDcfg, BoardInfo);
    if (WDrun.Restart) {
        CAEN_DGTZ_SWStopAcquisition(handle);
        CAEN_DGTZ_FreeReadoutBuffer(&buffer);
        if(Nbit == 8)
            CAEN_DGTZ_FreeEvent(handle, (void**)&Event8);
        else
            CAEN_DGTZ_FreeEvent(handle, (void**)&Event16);
            f_ini = fopen(ConfigFileName, "r");
            ReloadCfgStatus = ParseConfigFile(f_ini, &WDcfg);
            fclose(f_ini);
            goto Restart;
    }
    if (WDrun.AcqRun == 0)
        continue;

    /* Send a software trigger */
    if (WDrun.ContinuousTrigger) {
        CAEN_DGTZ_SendSWtrigger(handle);
    }

    /* Wait for interrupt (if enabled) */
    if (InterruptNumEvents > 0) {
        int32_t boardId;
        int VMEHandle = -1;
        int InterruptMask = (1 << VME_INTERRUPT_LEVEL);

        BufferSize = 0;
        NumEvents = 0;
        // Interrupt handling
        if (isVMEDevice) {
            ret = CAEN_DGTZ_VMEIRQWait ((CAEN_DGTZ_ConnectionType)LinkType, LinkNum, ConetNode, (uint8_t)InterruptMask, INTERRUPT_TIMEOUT, &VMEHandle);
        }
        else
            ret = CAEN_DGTZ_IRQWait(handle, INTERRUPT_TIMEOUT);
        if (ret == CAEN_DGTZ_Timeout)  // No active interrupt requests
            goto InterruptTimeout;
        if (ret != CAEN_DGTZ_Success)  {
            ErrCode = ERR_INTERRUPT;
            goto QuitProgram;
        }
        // Interrupt Ack
        if (isVMEDevice) {
            ret = CAEN_DGTZ_VMEIACKCycle(VMEHandle, VME_INTERRUPT_LEVEL, &boardId);
            if ((ret != CAEN_DGTZ_Success) || (boardId != VME_INTERRUPT_STATUS_ID)) {
                goto InterruptTimeout;
            } else {
                if (INTERRUPT_MODE == CAEN_DGTZ_IRQ_MODE_ROAK)
                    ret = CAEN_DGTZ_RearmInterrupt(handle);
            }
        }
    }

    /* Read data from the board */
    ret = CAEN_DGTZ_ReadData(handle, CAEN_DGTZ_SLAVE_TERMINATED_READOUT_MBLT, buffer, &BufferSize);
    if (ret) {

        ErrCode = ERR_READOUT;
        goto QuitProgram;
    }
    NumEvents = 0;
    if (BufferSize != 0) {
        ret = CAEN_DGTZ_GetNumEvents(handle, buffer, BufferSize, &NumEvents);
        if (ret) {
            ErrCode = ERR_READOUT;
            goto QuitProgram;
        }
    }
            else {
                    uint32_t lstatus;
                    ret = CAEN_DGTZ_ReadRegister(handle, CAEN_DGTZ_ACQ_STATUS_ADD, &lstatus);
                    if (ret) {
            qDebug() << "Warning: Failure reading reg:%x (%d)\n" << CAEN_DGTZ_ACQ_STATUS_ADD << " " << ret;
                    }
                    else {
                            if (lstatus & (0x1 << 19)) {
                                    ErrCode = ERR_OVERTEMP;
                                    goto QuitProgram;
                            }
                    }
            }
InterruptTimeout:
    /* Calculate throughput and trigger rate (every second) */
    Nb += BufferSize;
    Ne += NumEvents;
    CurrentTime = get_time();
    ElapsedTime = CurrentTime - PrevRateTime;

    nCycles++;
    if (ElapsedTime > 1000) {
        if (Nb == 0)
            if (ret == CAEN_DGTZ_Timeout)
                qDebug() << "Timeout...\n";
            else
                qDebug() << "No data...\n";
        else
            qDebug() << "Reading at " << (float)Nb/((float)ElapsedTime*1048.576f) << " MB/s (Trg Rate):" <<  (float)Ne*1000.0f/(float)ElapsedTime << " Hz)\n";
        nCycles= 0;
        Nb = 0;
        Ne = 0;
        PrevRateTime = CurrentTime;
    }

    /* Analyze data */
    for(i = 0; i < (int)NumEvents; i++) {

        /* Get one event from the readout buffer */
        ret = CAEN_DGTZ_GetEventInfo(handle, buffer, BufferSize, i, &EventInfo, &EventPtr);
        if (ret) {
            ErrCode = ERR_EVENT_BUILD;
            goto QuitProgram;
        }
        /* decode the event */
        if (Nbit == 8)
            ret = CAEN_DGTZ_DecodeEvent(handle, EventPtr, (void**)&Event8);
        else
            ret = CAEN_DGTZ_DecodeEvent(handle, EventPtr, (void**)&Event16);
            if (ret) {
                ErrCode = ERR_EVENT_BUILD;
                goto QuitProgram;
            }

            /* Update Histograms */
            if (WDrun.RunHisto) {
                for(ch=0; ch<Nch; ch++) {
                    int chmask = (BoardInfo.FamilyCode == CAEN_DGTZ_XX740_FAMILY_CODE)? (ch/8) : ch;
                    if (!(EventInfo.ChannelMask & (1<<chmask)))
                        continue;
                    if (WDrun.Histogram[ch] == NULL) {
                        if ((WDrun.Histogram[ch] = (uint32_t *)malloc((uint64_t)(1<<Nbit) * sizeof(uint32_t))) == NULL) {
                            ErrCode = ERR_HISTO_MALLOC;
                            goto QuitProgram;
                        }
                        memset(WDrun.Histogram[ch], 0, (uint64_t)(1<<Nbit) * sizeof(uint32_t));
                    }
                    if (Nbit == 8)
                        for(i=0; i<(int)Event8->ChSize[ch]; i++)
                            WDrun.Histogram[ch][Event8->DataChannel[ch][i]]++;
                    else {
                        for(i=0; i<(int)Event16->ChSize[ch]; i++)
                            WDrun.Histogram[ch][Event16->DataChannel[ch][i]]++;
                    }
                }
            }

            /* Write Event data to file */
            if (WDrun.ContinuousWrite || WDrun.SingleWrite) {
                // Note: use a thread here to allow parallel readout and file writing
                if (Nbit == 8) {
                    ret = WriteOutputFiles(&WDcfg, &WDrun, &EventInfo, Event8);
                }
                else {
                    ret = WriteOutputFiles(&WDcfg, &WDrun, &EventInfo, Event16);
                }
                if (ret) {
                    ErrCode = ERR_OUTFILE_WRITE;
                    goto QuitProgram;
                }
                if (WDrun.SingleWrite) {
                    qDebug() << "Single Event saved to output files\n";
                    WDrun.SingleWrite = 0;
                }
            }
    }
}

//......

/* stop the acquisition */
CAEN_DGTZ_SWStopAcquisition(handle);

/* close the output files and free histograms*/
for (ch = 0; ch < Nch; ch++) {
    if (fout[ch])
        fclose(fout[ch]);
}

/* close the device and free the buffers */
if(Event8)
    CAEN_DGTZ_FreeEvent(handle, (void**)&Event8);
if(Event16)
    CAEN_DGTZ_FreeEvent(handle, (void**)&Event16);
CAEN_DGTZ_FreeReadoutBuffer(&buffer);
CAEN_DGTZ_CloseDigitizer(handle);

